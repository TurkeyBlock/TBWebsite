"use client"
import { createClient } from '@/lib/supabase/client'

interface RequestBody {
  table: string,
  id?: number,
  action?: "RESET" | string,
  key?:string
}

interface PostReturn {
  id:number
  key:string
}
interface GetReturn{
  gameRow:any
}
interface combinedReturn{
  data?: PostReturn | GetReturn
  error?:string
}

export async function callSupabase(functionMethod:"GET"|"PATCH"|"POST", tableName:string, gameId?:number, gameAction?:string, playKey?:string):Promise<combinedReturn>{
  //Pull user's current JWT.
  const { data: { session } } = await createClient().auth.getSession();
  const jwt = session?.access_token;
  //Note that GameIDs are auto-generated by the edge function when using POST.
  const body: RequestBody = {
    table: tableName,
    id:gameId,
    action:gameAction,
    key:playKey,
  }

  const funcReturn:combinedReturn={};

  //GET methods can't have bodies, and that's a pain in the butt atm.
  if(functionMethod == "GET"){
    const { data: { returnBody }, error} = await createClient().functions.invoke('postgres-edge', {
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${jwt}`,
      },
      body,
    })
    funcReturn.data = returnBody;
    funcReturn.error = error;
  }
  else{
    //Invoke edge function with user's JWT.
    const { data, error } = await createClient().functions.invoke('postgres-edge', {
      method: `${functionMethod}`,
      headers: {
        'Authorization': `Bearer ${jwt}`,
      },
      body,
    })
    if(data){
      funcReturn.data = data.returnBody;
    }
    funcReturn.error = error;
  }
  console.log(funcReturn.data);
  if(funcReturn.data==null){
    console.log("Error in supabaseEdgeCaller: "+funcReturn.error);
  }
  //GET returns the game, PATCH & POST return success or fail.
  return funcReturn
}