"use client"
import { createClient } from '@/lib/supabase/client'

//To-do: assign player IDs to in-game "who's turn" array.
//Increment "Who's turn" counter on null player ID or turn submitted.
//Check all turn submitors against player ID in the [counter] array slot

//TicTacToe Actions: RESET | MOVE <Pos>
//ConnectFour Actions: RESET | MOVE <Col>

interface UpsertReturn {
  id:number|null
  key:string
  error:string|null
}
interface GetReturn {
  game:{
    board:object,
    [key: string]: unknown;
  }|null
  error:string|null
}

const gameEdge = 'postgres-edge';
const playerEdge = 'postgres-players';

export async function getSupabaseGame(tableName:string, gameId:number):Promise<GetReturn>{
  const { data: { session } } = await createClient().auth.getSession();
  const jwt = session?.access_token;
  const body = {
    table: tableName,
    id:gameId,
    key:null,
    action:null,
  }
  const funcReturn = {
    game:{
      board:{}
    },
    error:""
  };
  const { data:{returnBody}, error} = await createClient().functions.invoke(gameEdge, {
    method: 'PATCH',
    headers: {
      'Authorization': `Bearer ${jwt}`,
    },
    body,
  });
  if(returnBody){
    funcReturn.game = returnBody;
  }
  funcReturn.error = error;
  return funcReturn;
}

export async function upsertSupabaseGame(functionMethod:"PATCH"|"POST", tableName:string, gameId:number|null, playKey:string|null, gameAction:string|null):Promise<UpsertReturn>{
  const { data: { session } } = await createClient().auth.getSession();
  const jwt = session?.access_token;
  const body = {
    table: tableName,
    id:gameId,
    key:playKey,
    action:gameAction,
  }
  console.log(body);
  const funcReturn = {
    id:null,
    key:"",
    error:null
  };
  const { data:{returnBody}, error} = await createClient().functions.invoke(gameEdge, {
    method: `${functionMethod}`,
    headers: {
      'Authorization': `Bearer ${jwt}`,
    },
    body,
  });
  if(returnBody){
    funcReturn.id = returnBody.id;
    funcReturn.key = returnBody.key;
  }
  funcReturn.error = error;
  return funcReturn;
}

export async function upsertSupabaseGamePlayers(gameId:number, playKey:string|null, action:string):Promise<string|null>{
  const { data: { session } } = await createClient().auth.getSession();
  const jwt = session?.access_token;
  //Note that GameIDs are auto-generated by the edge function when using POST.
  const body = {
    id:gameId,
    key:playKey,
    action:action
  }
  const {error} = await createClient().functions.invoke(playerEdge, {
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${jwt}`,
      },
      body,
  });
  if (error){
    return error;
  }
  return null;
}